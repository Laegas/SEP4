package visualization.javaFxMaps;

import model.outputData.OutputData;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import static config.VisualizationConfig.*;

public class GenerateJSSettings {
    private static GenerateJSSettings instance;

    private GenerateJSSettings() {}

    public static GenerateJSSettings getInstance() {
        if(instance == null)
            instance = new GenerateJSSettings();
        return instance;
    }

    public void generateSettings(OutputData grid) {
        LayerWrapper[] layers = LAYERS(grid);
        List<String> lines = new ArrayList<>();
        lines.add("// settings.js generated by GenerateJSSettings.java");
        lines.add("\n// global settings");
        lines.add("var latitude = " + ((LATITUDE_START + LATITUDE_END) / 2) + ";");
        lines.add("var longitude = " + ((LONGITUDE_START + LONGITUDE_END) / 2) + ";");
        lines.add("var zoom = " + ZOOM + ";");
        lines.add("\n// layer settings");

        // iterate layers
        StringBuilder
                layerNameString = new StringBuilder("var layerName = ["),
                minimumAlphaString = new StringBuilder("var minimumAlpha = ["),
                alphaPropertyString = new StringBuilder("var alphaProperty = ["),
                alphaDividerPropertyString = new StringBuilder("var alphaDividerProperty = ["),
                visibilityFormulaString = new StringBuilder("var visibilityFormula = ["),
                displayStringFormatString = new StringBuilder("var displayStringFormat = ["),
                colorPropertyString = new StringBuilder("var colorProperty = ["),
                colorDividerPropertyString = new StringBuilder("var colorDividerProperty = ["),
                fromColorString = new StringBuilder("var fromColor = ["),
                toColorString = new StringBuilder("var toColor = [");
        int layerCounter = 0;
        for(LayerWrapper layer : layers) {
            layerNameString.append("\"");
            layerNameString.append(layer.getLayerName());
            layerNameString.append("\"");

            minimumAlphaString.append(layer.getMinimumAlpha());

            alphaPropertyString.append("\"");
            alphaPropertyString.append(layer.getAlphaProperty());
            alphaPropertyString.append("\"");

            alphaDividerPropertyString.append(layer.getAlphaDividerProperty());

            visibilityFormulaString.append("\"");
            visibilityFormulaString.append(layer.getVisibilityFormula());
            visibilityFormulaString.append("\"");

            displayStringFormatString.append("\"");
            displayStringFormatString.append(layer.getDisplayStringFormat());
            displayStringFormatString.append("\"");

            colorPropertyString.append("\"");
            colorPropertyString.append(layer.getColorProperty());
            colorPropertyString.append("\"");

            colorDividerPropertyString.append("\"");
            colorDividerPropertyString.append(layer.getColorDividerProperty());
            colorDividerPropertyString.append("\"");

            fromColorString.append("[");
            fromColorString.append(layer.getFromColor().toJSString());
            fromColorString.append("]");

            toColorString.append("[");
            toColorString.append(layer.getToColor().toJSString());
            toColorString.append("]");

            if(layerCounter++ < layers.length - 1) {
                layerNameString.append(", ");
                minimumAlphaString.append(", ");
                alphaPropertyString.append(", ");
                alphaDividerPropertyString.append(", ");
                visibilityFormulaString.append(", ");
                displayStringFormatString.append(", ");
                colorPropertyString.append(", ");
                colorDividerPropertyString.append(", ");
                fromColorString.append(", ");
                toColorString.append(", ");
            }
        }
        layerNameString.append("];");
        minimumAlphaString.append("];");
        alphaPropertyString.append("];");
        alphaDividerPropertyString.append("];");
        visibilityFormulaString.append("];");
        displayStringFormatString.append("];");
        colorPropertyString.append("];");
        colorDividerPropertyString.append("];");
        fromColorString.append("];");
        toColorString.append("];");

        lines.add(layerNameString.toString());
        lines.add(minimumAlphaString.toString());
        lines.add(alphaPropertyString.toString());
        lines.add(alphaDividerPropertyString.toString());
        lines.add(visibilityFormulaString.toString());
        lines.add(displayStringFormatString.toString());
        lines.add(colorPropertyString.toString());
        lines.add(colorDividerPropertyString.toString());
        lines.add(fromColorString.toString());
        lines.add(toColorString.toString());

        StringBuilder propertiesString = new StringBuilder("var properties = [");
        for(int i = 0; i < PROPERTIES.length; i++) {
            propertiesString.append("\"");
            propertiesString.append(PROPERTIES[i]);
            propertiesString.append("\"");
            if(i < PROPERTIES.length - 1)
                propertiesString.append(", ");
        }
        propertiesString.append("];");
        lines.add(propertiesString.toString());

        try {
            Path file = Paths.get("src/visualization/javaFxMaps/settings.js");
            Files.write(file, lines, Charset.forName("UTF-8"));
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println(e.getMessage());
        }
    }
}
