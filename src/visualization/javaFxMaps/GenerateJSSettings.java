package visualization.javaFxMaps;

import model.outputData.OutputData;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import static config.VisualizationConfig.*;

public class GenerateJSSettings {
    private static GenerateJSSettings instance;

    private GenerateJSSettings() {}

    public static GenerateJSSettings getInstance() {
        if(instance == null)
            instance = new GenerateJSSettings();
        return instance;
    }

    public void generateSettings(OutputData grid) {
        List<String> lines = new ArrayList<>();
        lines.add("// settings.js generated by GenerateJSSettings.java");
        lines.add("var latitude = " + ((LATITUDE_START + LATITUDE_END) / 2) + ";");
        lines.add("var longitude = " + ((LONGITUDE_START + LONGITUDE_END) / 2) + ";");
        lines.add("var zoom = " + ZOOM + ";");
        lines.add("var max_flights = " + grid.getMaxTotalRegisteredFlightCount() + ";");
        lines.add("var alphaProperty = \"" + ALPHA_PROPERTY + "\";");

        StringBuilder propertiesString = new StringBuilder("var properties = [");
        for(int i = 0; i < PROPERTIES.length; i++) {
            propertiesString.append("\"");
            propertiesString.append(PROPERTIES[i]);
            propertiesString.append("\"");
            if(i < PROPERTIES.length - 1)
                propertiesString.append(", ");
        }
        propertiesString.append("];");
        lines.add(propertiesString.toString());

        StringBuilder displayStrings = new StringBuilder("var displayStrings = [");
        for(int i = 0; i < DISPLAY_STRING_FORMAT.length; i++) {
            displayStrings.append("\"");
            displayStrings.append(PROPERTIES[i]);
            displayStrings.append("\"");
            if(i < PROPERTIES.length - 1)
                propertiesString.append(", ");
        }
        propertiesString.append("];");
        lines.add(propertiesString.toString());


        lines.add("var minimumAlpha = " + MINIMUM_ALPHA + ";");
        lines.add("var displayStringFormat = \"" + DISPLAY_STRING_FORMAT + "\";");
        lines.add("var visibilityFactor = \"" + VISIBILITY_FACTOR + "\";");

        try {
            Path file = Paths.get("src/visualization/javaFxMaps/settings.js");
            Files.write(file, lines, Charset.forName("UTF-8"));
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println(e.getMessage());
        }
    }
}
